import Head from 'next/head';
import { Modal, Button, Row, Loading } from "@nextui-org/react";
import { useState } from 'react';
const fs = require('fs');
const Papa = require('papaparse');
import { GetServerSideProps } from 'next';

// for chart 
import { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, ChartOptions} from 'chart.js'; 
import { Line } from 'react-chartjs-2';
ChartJS.register( CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);

function parseCSV():Promise<any>
{
  const file = fs.createReadStream('public/data.csv');
  return new Promise((resolve, reject) => {
    Papa.parse(file, {
      header: true,
      complete: (results:any) => resolve(results),
      error: (error:any) => reject(error)
    });
  })
}
interface PageProps {
  mainData: any[]; // Adjust the type of mainData to match the actual data structure
}
export const getServerSideProps: GetServerSideProps<PageProps> = async () => {
  const resp:any = await parseCSV();
  const dataFromCSV = resp.data;
  console.log("all Data Came")
    return {
        props: {
          mainData:dataFromCSV
        }
    }
}

const Home: React.FC = ({mainData}:any) => {
  const [visible, setVisible] = useState(false);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState("");
  const [dateArray, setDateArray] = useState([])
  const [priceArray, setPriceArray] = useState([])
  const [companyName, setCompanyName] = useState("")
  // for chart start
   const options:ChartOptions = {
    responsive: true,
    plugins: {
      legend: {
        position: 'top',
      },
      title: {
        display: true,
        text: companyName+'\'s Stock Data',
      },
    },
  };
  const labels = dateArray;
  
  const data = {
    labels,
    datasets: [
      {
        label: companyName,
        data: priceArray,
        borderColor: 'rgb(255, 99, 132)',
        backgroundColor: 'rgba(255, 99, 132, 0.5)',
      }
    ],
  };
  // for chart end
  
  const handler = async(companyName:string, xDividendDate:any) => {
    setVisible(true);
    setLoading(true);
    setCompanyName(companyName);
    try {
      const response = await fetch('http://localhost:8001/get-nse-data', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ companyName,xDividendDate }),
      });
      

      if (response.ok) {
        const responseData = await response.json();
        setLoading(false)
        console.log(responseData.allNSEData);
        let allNSEDates = responseData.allNSEData.map((item:any, index:number) => {
          return item.date.split('T')[0];
        })
        let allNSEPrices = responseData.allNSEData.map((item:any, index:number) => {
          return item.high;
        })
        if(allNSEDates){
          setDateArray(allNSEDates)
        }
        if(allNSEPrices){
          setPriceArray(allNSEPrices)
        }
      } else {
        setError('Failed to send data to the server')
      }
    } catch (error) {
      // console.error('Error sending data:', error);
      setError('Error sending data')
    }
  }
  const closeHandler = () => {
    setVisible(false);
  };
  return (
    <>
    <Head>
      <title>NSE Stock Price</title>
      <meta name="description" content="Generated by create next app" />
      <meta name="viewport" content="width=device-width, initial-scale=1" />
      <link rel="icon" href="/favicon.ico" />
      <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/css/bootstrap.min.css" rel="stylesheet"></link>
    </Head>
    <div className='csv_data'>
      <table border={1} className='table table-bordered table-striped'>
        <thead>
          <tr>
            <th>Company Name</th>
            <th>Dividend %</th>
            <th>Announcement Date</th>
            <th>Announcement Record</th>
            <th>Ex-dividend Record</th>
            <th>Action</th>
          </tr>
        </thead>
        <tbody>
        {mainData && mainData.map((data:any,index:number) => (
          <tr key={index}>
            <td>{data.column0}</td>
            <td>{data.column2}</td>
            <td>{data.column3}</td>
            <td>{data.column4}</td>
            <td>{data.column5}</td>
            <td>
              <div className="view_chart_btn w-100 d-flex justify-content-center">
                <Button  auto onPress={()=>{handler(data.column0,data.column5)}} className="btn btn-my-btn">View Chart</Button>
              </div>
            </td>
            
          </tr>
        ))}
        </tbody>
      </table>
    </div>
    <Modal
      closeButton
      blur
      aria-labelledby="Stock Data"
      width="70%"
      open={visible}
      onClose={closeHandler}
    >
      <Modal.Header>
      </Modal.Header>
      <Modal.Body>
        {loading && 
          <div className='d-flex flex-column align-items-center'>
            <Loading size="lg" />
            <p className='text-center my-2'>Loading...</p>
          </div>
        }
        {error && <h5 className='text-center'>Some Error Occured</h5>}
        {!loading && !error &&
          <Row justify="space-between">
            <Line options={options} data={data} />
          </Row>
        }
        
      </Modal.Body>
      <Modal.Footer>
        <Button auto flat color="error" onPress={closeHandler}>
          Close
        </Button>
      </Modal.Footer>
    </Modal>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/js/bootstrap.bundle.min.js" ></script>
    </>
  )
}

export default Home